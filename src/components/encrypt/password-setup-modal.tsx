import React, { useState, useEffect } from 'react';
import { Eye, EyeOff, RefreshCw, Copy, Check, AlertTriangle, X } from 'lucide-react';
import { FileEncryption } from '../../lib/crypto';

interface PasswordSetupModalProps {
  isOpen: boolean;
  onClose: () => void;
  onPasswordSet: (password: string, isAutoGenerated: boolean) => void;
  fileName?: string;
}

export function PasswordSetupModal({ 
  isOpen, 
  onClose, 
  onPasswordSet, 
  fileName 
}: PasswordSetupModalProps) {
  const [passwordMethod, setPasswordMethod] = useState<'auto' | 'manual'>('auto');
  const [autoPassword, setAutoPassword] = useState('');
  const [manualPassword, setManualPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [copied, setCopied] = useState(false);
  const [step, setStep] = useState(1);

  // 自動パスワード生成
  useEffect(() => {
    if (isOpen && passwordMethod === 'auto') {
      generateNewPassword();
    }
  }, [isOpen, passwordMethod]);

  const generateNewPassword = () => {
    const newPassword = FileEncryption.generatePassword();
    setAutoPassword(newPassword);
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(autoPassword);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy password:', error);
    }
  };

  const validatePassword = (password: string): { isValid: boolean; message: string } => {
    if (password.length < 8) {
      return { isValid: false, message: 'パスワードは8文字以上で入力してください' };
    }
    if (!/(?=.*[a-z])/.test(password)) {
      return { isValid: false, message: '小文字を含めてください' };
    }
    if (!/(?=.*[A-Z])/.test(password)) {
      return { isValid: false, message: '大文字を含めてください' };
    }
    if (!/(?=.*\d)/.test(password)) {
      return { isValid: false, message: '数字を含めてください' };
    }
    return { isValid: true, message: '' };
  };

  const handleContinue = () => {
    if (step === 1) {
      setStep(2);
    } else {
      const password = passwordMethod === 'auto' ? autoPassword : manualPassword;
      onPasswordSet(password, passwordMethod === 'auto');
      handleClose();
    }
  };

  const handleClose = () => {
    setStep(1);
    setManualPassword('');
    setConfirmPassword('');
    setShowPassword(false);
    setShowConfirmPassword(false);
    setCopied(false);
    onClose();
  };

  const canContinueStep1 = passwordMethod === 'auto' || passwordMethod === 'manual';
  
  const canContinueStep2 = passwordMethod === 'auto' ? 
    autoPassword.length > 0 : 
    manualPassword.length > 0 && 
    manualPassword === confirmPassword && 
    validatePassword(manualPassword).isValid;

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg max-w-md w-full p-6 relative">
        <button
          onClick={handleClose}
          className="absolute top-4 right-4 p-2 hover:bg-gray-100 rounded-full transition-colors"
        >
          <X className="h-5 w-5 text-gray-500" />
        </button>

        {/* プログレスバー */}
        <div className="mb-6">
          <div className="flex items-center justify-between mb-2">
            <h2 className="text-xl font-bold text-gray-900">
              カギスルを使う準備を進める
            </h2>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${(step / 2) * 100}%` }}
            />
          </div>
          <p className="text-sm text-gray-600 mt-2">
            {step === 1 ? 'あなたのカギを作成 1/2' : 'パスワードの入力 2/2'}
          </p>
        </div>

        {step === 1 && (
          <div className="space-y-6">
            {/* 説明 */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <div className="flex items-start space-x-3">
                <div className="p-1 bg-blue-100 rounded">
                  <AlertTriangle className="h-4 w-4 text-blue-600" />
                </div>
                <div>
                  <p className="text-sm text-blue-900">
                    カギを作成すると、カギスルを便利により安全に使えます。
                    カギスルのさまざまな機能が利用可能になります。
                  </p>
                </div>
              </div>
            </div>

            {/* ファイル解錠方法の選択 */}
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                ファイルを解錠する方法
              </h3>
              
              <div className="space-y-3">
                <label className="flex items-start space-x-3 cursor-pointer">
                  <input
                    type="radio"
                    name="passwordMethod"
                    value="auto"
                    checked={passwordMethod === 'auto'}
                    onChange={(e) => setPasswordMethod(e.target.value as 'auto')}
                    className="mt-1 text-blue-600 focus:ring-blue-500"
                  />
                  <div>
                    <div className="font-medium text-gray-900">
                      パスワード：自分専用のパスワード
                    </div>
                    <div className="text-sm text-gray-600">
                      強力なパスワードを自動生成します（推奨）
                    </div>
                  </div>
                </label>

                <label className="flex items-start space-x-3 cursor-pointer">
                  <input
                    type="radio"
                    name="passwordMethod"
                    value="manual"
                    checked={passwordMethod === 'manual'}
                    onChange={(e) => setPasswordMethod(e.target.value as 'manual')}
                    className="mt-1 text-blue-600 focus:ring-blue-500"
                  />
                  <div>
                    <div className="font-medium text-gray-900">
                      パスワード：手動入力
                    </div>
                    <div className="text-sm text-gray-600">
                      自分でパスワードを設定します
                    </div>
                  </div>
                </label>
              </div>
            </div>

            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <p className="text-sm text-yellow-800">
                パスワードを相手とやり取りする必要はありません。受け取ったファイルを開く時に入力する、
                あなただけのパスワードを作成します。
              </p>
            </div>
          </div>
        )}

        {step === 2 && (
          <div className="space-y-6">
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                {passwordMethod === 'auto' ? '自動生成パスワード' : 'パスワードの入力'}
              </h3>
              <p className="text-sm text-gray-600 mb-4">
                {passwordMethod === 'auto' 
                  ? '以下のパスワードを安全な場所に保存してください。'
                  : 'ファイルの解錠に使用するパスワードを入力してください。'
                }
              </p>
            </div>

            {passwordMethod === 'auto' ? (
              <div className="space-y-4">
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <div className="flex items-start space-x-2">
                    <AlertTriangle className="h-5 w-5 text-yellow-600 mt-0.5" />
                    <div>
                      <h4 className="font-medium text-yellow-900 mb-1">警告</h4>
                      <p className="text-sm text-yellow-800">
                        パスワードは誰とも共有しないでください。
                      </p>
                    </div>
                  </div>
                </div>

                <div className="relative">
                  <div className="flex">
                    <input
                      type={showPassword ? 'text' : 'password'}
                      value={autoPassword}
                      readOnly
                      className="flex-1 px-3 py-3 border border-gray-300 rounded-l-lg bg-gray-50 font-mono text-sm"
                    />
                    <button
                      type="button"
                      onClick={() => setShowPassword(!showPassword)}
                      className="px-3 border-t border-b border-gray-300 bg-gray-50 hover:bg-gray-100 transition-colors"
                    >
                      {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                    </button>
                    <button
                      type="button"
                      onClick={copyToClipboard}
                      className="px-3 border border-gray-300 rounded-r-lg bg-gray-50 hover:bg-gray-100 transition-colors"
                    >
                      {copied ? <Check className="h-4 w-4 text-green-600" /> : <Copy className="h-4 w-4" />}
                    </button>
                  </div>
                </div>

                <div className="flex justify-between items-center">
                  <button
                    type="button"
                    onClick={generateNewPassword}
                    className="flex items-center space-x-2 text-blue-600 hover:text-blue-700 text-sm"
                  >
                    <RefreshCw className="h-4 w-4" />
                    <span>新しいパスワードを生成</span>
                  </button>
                  {copied && (
                    <span className="text-sm text-green-600">コピーしました！</span>
                  )}
                </div>
              </div>
            ) : (
              <div className="space-y-4">
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <div className="flex items-start space-x-2">
                    <AlertTriangle className="h-5 w-5 text-yellow-600 mt-0.5" />
                    <div>
                      <h4 className="font-medium text-yellow-900 mb-1">警告</h4>
                      <p className="text-sm text-yellow-800">
                        パスワードは誰とも共有しないでください。
                      </p>
                    </div>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    パスワード
                  </label>
                  <div className="relative">
                    <input
                      type={showPassword ? 'text' : 'password'}
                      value={manualPassword}
                      onChange={(e) => setManualPassword(e.target.value)}
                      placeholder="8文字以上の強力なパスワード"
                      className="w-full px-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 pr-10"
                    />
                    <button
                      type="button"
                      onClick={() => setShowPassword(!showPassword)}
                      className="absolute right-3 top-1/2 transform -translate-y-1/2"
                    >
                      {showPassword ? <EyeOff className="h-4 w-4 text-gray-500" /> : <Eye className="h-4 w-4 text-gray-500" />}
                    </button>
                  </div>
                  {manualPassword && !validatePassword(manualPassword).isValid && (
                    <p className="mt-1 text-sm text-red-600">
                      {validatePassword(manualPassword).message}
                    </p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    パスワード確認
                  </label>
                  <div className="relative">
                    <input
                      type={showConfirmPassword ? 'text' : 'password'}
                      value={confirmPassword}
                      onChange={(e) => setConfirmPassword(e.target.value)}
                      placeholder="パスワードを再入力"
                      className="w-full px-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 pr-10"
                    />
                    <button
                      type="button"
                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                      className="absolute right-3 top-1/2 transform -translate-y-1/2"
                    >
                      {showConfirmPassword ? <EyeOff className="h-4 w-4 text-gray-500" /> : <Eye className="h-4 w-4 text-gray-500" />}
                    </button>
                  </div>
                  {confirmPassword && manualPassword !== confirmPassword && (
                    <p className="mt-1 text-sm text-red-600">
                      パスワードが一致しません
                    </p>
                  )}
                </div>

                <div className="text-xs text-gray-500 space-y-1">
                  <p>パスワードの要件:</p>
                  <ul className="list-disc list-inside space-y-1 ml-2">
                    <li className={manualPassword.length >= 8 ? 'text-green-600' : ''}>
                      8文字以上
                    </li>
                    <li className={/(?=.*[a-z])/.test(manualPassword) ? 'text-green-600' : ''}>
                      小文字を含む
                    </li>
                    <li className={/(?=.*[A-Z])/.test(manualPassword) ? 'text-green-600' : ''}>
                      大文字を含む
                    </li>
                    <li className={/(?=.*\d)/.test(manualPassword) ? 'text-green-600' : ''}>
                      数字を含む
                    </li>
                  </ul>
                </div>
              </div>
            )}
          </div>
        )}

        {/* ボタン */}
        <div className="flex justify-between mt-8">
          {step === 2 && (
            <button
              onClick={() => setStep(1)}
              className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
            >
              戻る
            </button>
          )}
          <div className="flex-1" />
          <button
            onClick={handleContinue}
            disabled={step === 1 ? !canContinueStep1 : !canContinueStep2}
            className="px-8 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {step === 1 ? 'あなたのカギを作成' : '続ける'}
          </button>
        </div>
      </div>
    </div>
  );
}